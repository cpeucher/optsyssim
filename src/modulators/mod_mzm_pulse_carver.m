function sig = mod_mzm_pulse_carver(sig,frequency,duty_cycle)
% Mach-Zehnder modulator-based pulse carver
%
% -------------------------------------------------------------------------
% DESCRIPTION:
% -------------------------------------------------------------------------
% This function implements a Mach-Zehnder pulse carver for the generation
% of an optical clock signal with duty cycle of 33, 50 or 67%. The output
% is synchronised so that it can be used directly for e.g. data modulation
% without having to apply any delay (electrical or optical). This means
% that the pulses generated by the module are centered around integer
% multiples of 1/frequency/2.
%
% -------------------------------------------------------------------------
% FUNCTION CALL:
% -------------------------------------------------------------------------
% optical_clock_frequency = symbol_rate;
% optical_clock_duty_cycle = 'rz33';%'rz50';%'rz67';
% sig = mod_mzm_pulse_carver(sig,optical_clock_frequency,optical_clock_duty_cycle);
%
% -------------------------------------------------------------------------
% INPUTS:
% -------------------------------------------------------------------------
% sig               input optical signal [optical signal structure]
%
% frequency         frequency of the optical clock signal generated by the 
%                       pulse carver [real scalar]
%                       Note that this is NOT the frequency of the rf 
%                       signal driving the pulse carver!
%
% duty_cycle        duty cycle of the optical clock signal generated by the 
%                       pulse carver [string]
%
%                       duty_cycle = 'rz33';
%                       duty_cycle = 'rz50';
%                       duty_cycle = 'rz67';
%
% -------------------------------------------------------------------------
% OUTPUTS:
% -------------------------------------------------------------------------
% sig               output optical signal [optical signal structure]
%
% -------------------------------------------------------------------------
% GLOBAL:
% -------------------------------------------------------------------------
% 
%
% -------------------------------------------------------------------------
% REMARKS:
% -------------------------------------------------------------------------
% 
%
% -------------------------------------------------------------------------
% TO DO:
% -------------------------------------------------------------------------
% 
%
% -------------------------------------------------------------------------
% CREDITS:
% -------------------------------------------------------------------------
% 
%
% -------------------------------------------------------------------------
% AUTHOR:
% -------------------------------------------------------------------------
% Christophe Peucheret (christophe.peucheret@univ-rennes1.fr)
%
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------


vpi = 1.0;
% Modulator half-wave voltage, in V.

if strcmp(duty_cycle,'rz33')
    % 33% RZ pulse carver
    params_clock.frequency = frequency/2;
    params_clock.phase = pi;
    params_clock.vpp = 1;
    params_clock.vdc = 0;
    clock_sig = elec_sinusoidal(params_clock);
    % Generate electrical clock signal.    
    bias_1 = 0;
    bias_2 = 0;
    driving_signal_1 = vpi*clock_sig;
    driving_signal_2 = -vpi*clock_sig;
    % Mach-Zehnder modulator driving conditions.    
    
elseif strcmp(duty_cycle,'rz50')
    % 50% RZ pulse carver
    params_clock.frequency = frequency;
    params_clock.phase = pi;
    params_clock.vpp = 1;
    params_clock.vdc = 0;
    clock_sig = elec_sinusoidal(params_clock);
    % Generate electrical clock signal
    bias_1 = 1.5*vpi;
    bias_2 = 0;
    driving_signal_1 = vpi/2*clock_sig;
    driving_signal_2 = -vpi/2*clock_sig;    
    % Mach-Zehnder modulator driving conditions.    
    
elseif strcmp(duty_cycle,'rz67')
    % 33% RZ pulse carver
    params_clock.frequency = frequency/2;
    params_clock.phase = pi/2;
    params_clock.vpp = 1;
    params_clock.vdc = 0;
    clock_sig = elec_sinusoidal(params_clock);
    % Generate electrical clock signal.
    bias_1 = vpi;
    bias_2 = 0;
    driving_signal_1 = vpi*clock_sig;
    driving_signal_2 = -vpi*clock_sig;
    % Mach-Zehnder modulator driving conditions.    
    
else
    disp('mod_mzm_pulse_carver: duty cycle not implemented.');
end

sig = mod_mzm(sig,driving_signal_1,driving_signal_2,bias_1,bias_2,vpi,0.5,0.5,0);

end
% -------------------------------------------------------------------------
% End of function
% -------------------------------------------------------------------------