function [sig,ui,uq] = tx_qam16_nrz_iq(params)
% NRZ-16QAM transmitter using ideal optical IQ modulator
%
% -------------------------------------------------------------------------
% DESCRIPTION:
% -------------------------------------------------------------------------
% This function generates an NRZ-16QAM signal signal using an ideal 
% I/Q modulator.
% The transmitter consists of a CW laser followed by an I/Q data modulator. 
% The transmitter is ideal in the sense that the extinction ratio of each
% of the Mach-Zehnder modulators in the IQ structure is infinite. They are
% biased at minimum point. The interferometric structure is also perfectly
% balanced. However, the peak-to-peak voltage of the 4PAM
% driving signals and the levels in those 4PAM signals can be adjusted, to
% reflect typical experimental driving conditions where 2Vpi signals with
% ideal levels with respect to the nonlinear transfer function of the MZMs
% are not necessarily available. See e.g. 
% P. J. Winzer, A. H. Gnauck, C. R. Doerr, M. Magarini, and L. L. Buhl, 
% "Spectrally Efficient Long-Haul Optical Networking Using 112-Gb/s 
% Polarization-Multiplexed 16-QAM," Journal of Lightwave Technology, vol.
% 28, no. 4, pp. 547-556, Feb. 2010.
% The rise times of the binary signals and the linewidth of CW laser can be
% adjusted.
% We use definitions and notations from:
% Matthias Seimetz, "High-order Modulation for Optical Fiber Transmission",
% Springer Series in Optical Sciences, vol. 143, Springer, Berlin, 2009,
% in particular Sec. 2.6.3 Conventional IQ transmitter, pp. 42-45,
% as well as:
% S. H. Chang, H. S. Chung and K. Kim, "Optimization of operating
% conditions for 122-Gb/s polarization-multiplexed 16-QAM optical
% modulation," IEEE Photonics Technology Letters, vol. 23, no. 11, pp.
% 724-726, Jun. 2011.
%
% -------------------------------------------------------------------------
% FUNCTION CALL:
% -------------------------------------------------------------------------
% params_tx.emission_frequency = reference_frequency;
% params_tx.linewidth = 0;
% params_tx.power = 1e-3;
% params_tx.bit_pattern.b1 = round(rand(1,nsymbols));
% params_tx.bit_pattern.b2 = round(rand(1,nsymbols));
% params_tx.bit_pattern.b3 = round(rand(1,nsymbols));
% params_tx.bit_pattern.b4 = round(rand(1,nsymbols));
% params_tx.rise_time = 1/symbol_rate/4;
% params_tx.alpha = 0.64;
% params_tx.beta = 1;
% [sig,ui,uq] = tx_qam16_nrz_iq(params_tx); 
%
% -------------------------------------------------------------------------
% INPUTS:
% -------------------------------------------------------------------------
% params            transmitter parameters [structure]
%
%                       params.emission_frequency
%                           desired centre frequency of the channel, in Hz
%                           [real scalar]
%                           It will be adapted so that it coincides with a 
%                           sample of the discrete frequency grid.
%
%                       params.linewidth
%                           laser linewidth, in Hz [real scalar]
%
%                       params.power
%                           laser power, in W [real scalar]
%
%                       params.bit_pattern
%                           binary data patterns from which the QAM signal
%                           will be synthesised [structure]%       
%                           bit_pattern.b1 [binary pattern]
%                           bit_pattern.b2 [binary pattern]
%                           bit_pattern.b3 [binary pattern] 
%                           bit_pattern.b4 [binary pattern]
%                           following Matthias' notations.
%
%                       params.alpha
%                           attenuation of one of the signals in the 
%                           generation of the 4 PAM signals [real scalar]
%                           If alpha = 0.5 then the spacing between 
%                           2 consecutive levels is the same. 
%                           The 4PAM signal is generated by summing a 
%                           binary signal of amplitude 1 with a binary 
%                           signal of amplitude alpha.
%
%                       params.beta
%                           fraction of 2 Vpi used to drive each of the
%                           MZM in the IQ structure [real scalar]
%                           The MZMs are always biased at a minimum in
%                           their transfer function. 
%                           If beta = 1, then the MZM are driven between 
%                           consecutive maxima. 
%                           If beta = 0.5, they are driven between the 2 
%                           quadrature points.
%                           For beta = 1, the ideal constellation is 
%                           obtained for alpha = 0.64 (Seimetz, p. 45). 
%                           For beta=0.5, alpha=0.5 will be fine in 
%                           practice.
%
%                       params.rise_time
%                           rise time of the electrical NRZ signal driving
%                           the data modulator, in s [real scalar]
%
% -------------------------------------------------------------------------
% OUTPUTS:
% -------------------------------------------------------------------------
% sig               modulated optical signal [optical signal structure]
%                       
% ui                signal driving the in-phase MZM [real vector]
%
% uq                signal driving the quadrature MZM [real vector]
%
% -------------------------------------------------------------------------
% GLOBAL:
% -------------------------------------------------------------------------
% 
%
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------

b1 = params.bit_pattern.b1;
b2 = params.bit_pattern.b2;
b3 = params.bit_pattern.b3;
b4 = params.bit_pattern.b4;
% Make the notations a bit lighter

[d1,d2,~,~,~] = logical_differential_encoder_dqpsk('parallel',b1,b2);
% DQPSK differential encoding of b1 and b2


c3 =  (d1 & d2 & b3) | (d1 & ~d2 & b4) | (~d2 & ~b3 & b4) | (~d1 & d2 & ~b4) | (~d1 & ~b3 & ~b4);
% Seimetz, equation (2.48)
c4 = (~d1 & b3 & ~b4) | (~d1 & d2 & b3) | (d1 & d2 & b4)   | (d1 & ~d2 & ~b3) | (~d2 & ~b3 & ~b4);
% Seimetz, equation (2.49)


nrz_data_sig_c1 = 2*elec_pulse_sequence_nrz(d1,params.rise_time) - 1;
nrz_data_sig_c2 = 2*elec_pulse_sequence_nrz(d2,params.rise_time) - 1;
nrz_data_sig_c3 = 2*elec_pulse_sequence_nrz(c3,params.rise_time) - 1;
nrz_data_sig_c4 = 2*elec_pulse_sequence_nrz(c4,params.rise_time) - 1;
% Generate the 4 binary sequences corresponding to C1, C2, C3, C4
% note that C1=D1 and C2=D2;
% The electrical signals are in the range [-1 1]


vpi = 1.0;
v0 = params.beta*vpi/(1 + params.alpha);


ui = v0*(nrz_data_sig_c1 + params.alpha*nrz_data_sig_c3);
% In-phase modulator driving signal

uq = v0*(nrz_data_sig_c2 + params.alpha*nrz_data_sig_c4);
% Quadrature modulator driving signal

sig = opt_laser_cw(params);
% CW laser signal.

% The peak-to-peak of Delta V applied to each modulator is 2*(1+\alpha)V0
% with (1+\alpha)V0=\beta Vpi
driving_signal_i1 = 0.5*ui;
driving_signal_i2 = -0.5*ui;
driving_signal_q1 = 0.5*uq;
driving_signal_q2 = -0.5*uq;
bias_1 = vpi;
bias_2 = 0;

[sig_1,sig_2] = opt_splitter_y_junction(sig);
% Input power splitter
sig_1 = mod_mzm(sig_1,driving_signal_i1,driving_signal_i2,bias_1,bias_2,vpi,0.5,0.5,0);
% Data modulator for I quadrature
sig_2 = mod_mzm(sig_2,driving_signal_q1,driving_signal_q2,bias_1,bias_2,vpi,0.5,0.5,0);
% Data modulator for Q quadrature
sig_2 = opt_phase_shift(sig_2,pi/2);
% pi/2 phase shift applied to the Q quadrature
sig = opt_combiner_y_junction(sig_1,sig_2);
% Output power combiner

end