function sig = rx_pin(sig,params)
% PIN receiver with shot and thermal noise and low-pass filtering
%
% -------------------------------------------------------------------------
% DESCRIPTION:
% -------------------------------------------------------------------------
% This function simulates a PIN photodiode. Thermal and shot noise are
% considered.
%
% -------------------------------------------------------------------------
% FUNCTION CALL:
% -------------------------------------------------------------------------
% params_pin.pd.responsivity = 1;
% params_pin.pd.thermal_noise_density = 10e-12;
% params_pin.pd.shot_noise = 0;
% params_pin.pd.dark_current = 0;
% params_pin.elpf.type = 'none';%'bessel';'gaussian';'rc';'rectangular';
% params_pin.elpf.order = 4;
% params_pin.elpf.f3dB = 0.7*symbol_rate;
% sig = rx_pin(sig,params_pin);
%
% -------------------------------------------------------------------------
% INPUTS:
% -------------------------------------------------------------------------
% sig               optical signal to be detected [optical signal
%                       structure]
%
% params            photodiode parameters [structure]
%
%                       params.pd.responsivity
%                           responsivity of the photodiode, in A/W 
%                           [real scalar]
%
%                       params.pd.thermal_noise_density
%                           single sided spectral density of thermal noise, 
%                           in A/sqrt(Hz) [real scalar]
%
%                       params.pd.shot_noise
%                           specifies whether shot noise is included or not
%                           [0/1]
%                           params.pd.shot_noise = 0;
%                           params.pd.shot_noise = 1;
%
%                       params.pd.dark_current 
%                           dark current, in A [real scalar]
%
%                       params.elpf
%                           low-pass filter parameters
%                           [structure]
%                           See elec_elpf.m
%
% -------------------------------------------------------------------------
% OUTPUTS:
% -------------------------------------------------------------------------
% sig                   electrical signal after photodetection
%                           [real vector]
%
% -------------------------------------------------------------------------
% GLOBAL:
% -------------------------------------------------------------------------
% CONSTANT              essential physical constants [structure]
%
% dt                    time samples separation, in s [real scalar]
%
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------

global CONSTANT
global dt


nsamples = length(sig.x);
% Number of samples in the input signal.

ip = params.pd.responsivity*(abs(sig.x).^2 + abs(sig.y).^2);
% Calculate the photocurrent generated by the photodiode.
% No bandwidth limitation is assumed at this point.
% Polarisation independance is assumed. Otherwise add polariser in front.

noise_bandwidth = 1/dt/2;
% Bandwidth over which the Gaussian noise will be generated for both shot
% and thermal noise.

if params.pd.shot_noise == 1
    sig2_shot = 2*CONSTANT.q*(ip + params.pd.dark_current)*noise_bandwidth;
    % Variance of the shot noise.
    is = sqrt(sig2_shot).*randn(1,nsamples);
    % Realisation of the shot noise current.
elseif params.pd.shot_noise == 0
    is = 0;
end
% Create shot noise current.

sig2_th = params.pd.thermal_noise_density^2*noise_bandwidth;
% Thermal noise variance.
ith = sqrt(sig2_th).*randn(1,nsamples);
% Realisation of the thermal noise current.

sig = ip + params.pd.dark_current + is + ith;
% Add the dark current and the noise to the photocurrent.

sig = elec_elpf(sig,params.elpf);
% Filter the (noisy) photocurrent.

end