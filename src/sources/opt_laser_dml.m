function sig = opt_laser_dml(sig,params,numparams)
% Directly modulated single-mode laser using rate equations
%
% -------------------------------------------------------------------------
% DESCRIPTION:
% -------------------------------------------------------------------------
% This function models a single-mode directly modulated laser. It solves
% coupled rate equations for the carrier density, photon density and phase.
% The rate equations are identical to those in e.g.:
%  - J. Bowers, B. Hemenway, A. Gnauck, and D. Wilt, "High-speed InGaAsP 
%    constricted-mesa lasers," IEEE Journal of Quantum Electronics 22, 833 
%    (1986) [DOI: 10.1109/JQE.1986.1073043].
% - J.C. Cartledge and G.S. Burley, "The effect of laser chirping on 
%   lightwave system performance," Journal of Lightwave Technology 7, 568 
%   (1989) [DOI: 10.1109/50.16895].
% - J.C. Cartledge and R.C. Srinivasan, "Extraction of DFB laser rate 
%   equation parameters for system simulation purposes," Journal of 
%   Lightwave Technology 15, 852 (1997) [DOI: 10.1109/50.580827].
% See also:
% - L.A. Coldren and S.W. Corzine, Diode Lasers and Photonic Integrated 
%   Circuits (Wiley, 1995).
%
% -------------------------------------------------------------------------
% FUNCTION CALL:
% -------------------------------------------------------------------------
% params_dml.tau_p = 2.6e-12;          % photon lifetime, in s
% params_dml.tau_c = 3.17e-9;          % carrier lifetime, in s
% params_dml.n_0 = 2.0e24;             % carrier density at transparency, in 1/m^3
% params_dml.sigma_g = 3.34e-20;       % gain cross section, in m^2
% params_dml.n_g = 4;                  % group effective index
% params_dml.Gamma = 0.2408;           % confinement factor
% params_dml.V = 3.6e-17;              % active volume, in m^3
% params_dml.epsilon_nl = 2.0e-23;     % gain suppression factor, in m^3
% params_dml.alpha = 6;                % linewidth enhancement factor
% params_dml.beta = 1.0e-3;            % spontaneous emission factor
% params_dml.eta_0 = 0.2;              % differential quantum efficiency
% params_dml.emission_frequency = reference_frequency; % emission frequency, in Hz
% numparams_dml.ode_solver_options = odeset('RelTol',1e-8);% ODE solver parameters
% numparams_dml.npass = 2;             % number of iterations of the ODE solver
% numparams_dml.check_convergence = 0;  % display convergence of densities.
% sig = opt_laser_dml(sig,params_dml,numparams_dml); 
%
% -------------------------------------------------------------------------
% INPUTS:
% -------------------------------------------------------------------------
% sig               electrical driving signal [real vector]
%
%                       Corresponds to a current, in A
%
%                       This signal is typically generated by 
%                       sig = elec_driver(nrz_dara_sig,idc,ipp);
%                       where the DC bias and peak-to-peak current are
%                       specified.
%
% params           laser physical parameters [stucture]
%
%                       params.tau_p
%                           photon lifetime, in s
%
%                       params.tau_c
%                           carrier lifetime, in s
%
%                       params.n_0
%                           carrier density at transparency, in 1/m^3
%
%                       params.sigma_g
%                           gain cross section, in m^2
%
%                       params.n_g
%                           group index
%                           
%                       params.Gamma
%                           confinement factor
%
%                       params.V
%                           active volume, in m^3
%
%                       params.epsilon_nl
%                           gain suppression factor, in m^3
%
%                       params.alpha
%                           linewidth enhancement factor
%
%                       params.beta
%                           spontaneous emission factor
%               
%                       params.eta_0
%                           differential quantum efficiency
%               
%                       params.emission_frequency
%                           emission frequency, in Hz
%
% numparams         numerical parameters [structure]
%
%                       numparams.ode_solver_options
%                           ODE solver options
%
%                       numparams.npass
%                           number of runs of the ODE solver. 
%                           The output of the model corresponds to the 
%                           results of the last run. 
%
%                       numparams.check_convergence
%                           display the photon density and carrier density 
%                           for the number of iterations specified in 
%                           numparams.npass in order to visually check the 
%                           convergence of the model 
%                           numparams.check_convergence = 0/1
%
% -------------------------------------------------------------------------
% OUTPUTS:
% -------------------------------------------------------------------------
% sig               output optical signal [optical signal structure]
%
%                       The signal is polarised along the -x axis.
%
% -------------------------------------------------------------------------
% GLOBAL:
% -------------------------------------------------------------------------
% CONSTANT              essential physical constants [structure]
%
% time_array            time samples, in s [real vector]
%
% reference_frequency   reference frequency, in Hz [real scalar]
%
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------


global time_array 
global reference_frequency
global CONSTANT


G = CONSTANT.c/params.n_g*params.sigma_g;
% Gain

ibias = min(sig);
% The bias is defined the minimum value of the driving current for the
% calculations of the initial conditions.

x0(1) = (CONSTANT.q*params.V*(params.beta - 1)*(1 + params.n_0*params.Gamma*G*params.tau_p)+params.tau_c*params.Gamma*params.tau_p*G*ibias)/(CONSTANT.q*params.V*(G*params.tau_c - params.epsilon_nl*(params.beta - 1)));
x0(2) = params.n_0 + (1 + params.epsilon_nl*x0(1))/(params.Gamma*G*params.tau_p);
x0(3) = 0;
% Initial conditions:

x0 = x0(:);
% Make x0 a column vector. 


carrier_density = zeros(numparams.npass,length(time_array));
photon_density = zeros(numparams.npass,length(time_array));
% Create arrays to store the carrier density and photon density evolutions
% as a function of time for the diverent runs of the ODE solver


for ipass = 1:1:numparams.npass
    
    [t,y] = ode45(@opt_laser_dml_re_01,[0,time_array(length(time_array))],x0,numparams.ode_solver_options,params,time_array,sig);
    % ODE solver
    
    x0 = [y(end,1);y(end,2);y(end,3)];
    % Take final values of the previous run of the ODE solver as initial
    % conditions of the next run (if any)

    Y = interp1(t,y,time_array);
    % Interpolate the results back on the standard time axis

    carrier_density(ipass,:) = Y(:,2);
    photon_density(ipass,:) = Y(:,1);
    % Save the values of the carrier density and current density after the
    % previous run of the ODE solver

end
% Iterate calls to the ODE solver to ensure the results returned by the 
% function have converged over the entire time window

% y(:,1) is the photon density
% y(:,2) is the carrier density
% y(:,3) is the phase


power = Y(:,1)*params.V*params.eta_0*CONSTANT.h*params.emission_frequency/(2*params.Gamma*params.tau_p);
% Laser output power

sig = struct;
% Initialise output signal

sig.x = sqrt(power.').*exp(-1i*Y(:,3).').*exp(1i*2*pi*(params.emission_frequency - reference_frequency)*time_array);
sig.y = zeros(1,length(time_array));
% Create the signal structure
% The signal is polarised along the -x axis




if numparams.check_convergence == 1
    % Plot the photon and carrier densities for the different iterations of
    % the ODE solver in order to check the convergence of the results   
    
    plot_style = {'b-','r--','g-.','c:','m:'};
    % Define plot styles for representing the carrier and photon densities
    % iterations
    
    for ii = 6:numparams.npass
        plot_style{ii} = 'k:';
    end
    % Define plot styles in case more than 5 iterations are required
    % It is doubtful this will ever be used, but it avoids that the
    % function returns an error in the unlikely case it is.
    
    
    figure('Name','opt_laser_dml: carrier and photon density');
    subplot(2,1,1)
    plot(time_array/1.0e-12,photon_density(1,:),plot_style{1});
    legend_info{1} = 'pass 1';
    hold on;
    for ipass=2:numparams.npass
        plot(time_array/1.0e-12,photon_density(ipass,:),plot_style{ipass});
        legend_info{ipass} = ['pass ' num2str(ipass)]; % or whatever is appropriate
    end
    xlabel('time (ps)');
    ylabel('photon density (1/m^3)');
    legend(legend_info);
    
    subplot(2,1,2)
    plot(time_array/1.0e-12,carrier_density(1,:),plot_style{1});
    hold on;
    for ipass = 2:numparams.npass
        plot(time_array/1.0e-12,carrier_density(ipass,:),plot_style{ipass});
    end
    xlabel('time (ps)');
    ylabel('carrier density (1/m^3)');
    legend(legend_info);
end

end
% -------------------------------------------------------------------------
% End of opt_laser_dml function.
% -------------------------------------------------------------------------







% -------------------------------------------------------------------------
% Rate equations
% -------------------------------------------------------------------------
function dx = opt_laser_dml_re_01(t,x,params,time,sig)
% Set of rate equations for directly modulated laser
%
% -------------------------------------------------------------------------
% DESCRIPTION:
% -------------------------------------------------------------------------
% This function implements a set of coupled differential equations for a
% directly modulated semiconductor laser.
%
% -------------------------------------------------------------------------
% INPUTS:
% -------------------------------------------------------------------------
% t                 the driving signal will be interpolated at these
%                   time samples
%
% x                 column vector [P N phi]'
%                       where
%                       P= photon density, in 1/m3
%                       N= carrier density, in 1/m3
%                       phi= phase in radians
%
% params            laser physical parameters
%
% time              time samples at which the driving signal is specified
%
% sig               driving signal
%
% -------------------------------------------------------------------------
% OUTPUTS:
% -------------------------------------------------------------------------
% dx              column vector [dP/dt dN/dt dphi/dt]'
%
% -------------------------------------------------------------------------
% GLOBAL:
% -------------------------------------------------------------------------
% CONSTANT         essential physical constants
%
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------

global CONSTANT

G0 = CONSTANT.c/params.n_g*params.sigma_g;
% Gain

driving_current = interp1(time,sig,t);
% Interpolate the driving current at desired time

dx(1) = params.Gamma*G0*(x(2) - params.n_0)/(1 + params.epsilon_nl*x(1))*x(1) - x(1)/params.tau_p + params.beta*params.Gamma*x(2)/params.tau_c;
% Derivative of the photon density P

dx(2) = driving_current/CONSTANT.q/params.V - G0*(x(2) - params.n_0)/(1 + params.epsilon_nl*x(1))*x(1) - x(2)/params.tau_c;
% Time derivative of the carrier density N

dx(3) = -0.5*params.alpha*(params.Gamma*G0*(x(2) - params.n_0) - 1/params.tau_p);
% Time derivative of the phase

dx = dx(:);
% Forces the derivatives to a column vector

end
% -------------------------------------------------------------------------
% End of opt_laser_dml_re_01 function
% -------------------------------------------------------------------------