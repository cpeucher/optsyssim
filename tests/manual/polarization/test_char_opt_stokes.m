% -------------------------------------------------------------------------
% Test of char_opt_stokes function
% We test the calculation of Stokes paramters for a fully polarized signal.
%
% Christophe Peucheret (christophe.peucheret@univ-rennes1.fr)
% 2025-08-01
%
% -------------------------------------------------------------------------


% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% Preparation
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------

% ------------------------------------------------------------------------- 
% Clean up
% ------------------------------------------------------------------------- 
clear all
close all

% ------------------------------------------------------------------------- 
% Specify display format
% ------------------------------------------------------------------------- 
format long

% ------------------------------------------------------------------------- 
% Dock figures
% ------------------------------------------------------------------------- 
% set(0,'DefaultFigureWindowStyle','docked');
set(0,'DefaultFigureWindowStyle','normal');

% ------------------------------------------------------------------------- 
% Reinitialise the random number generator for reproducibility of the
% results.
% ------------------------------------------------------------------------- 
stream = RandStream.getGlobalStream;
reset(stream);

% -------------------------------------------------------------------------
% Strings for filenames
% -------------------------------------------------------------------------
file_name_core_figure = strrep(mfilename,'test','fig');
file_name_core_data = strrep(mfilename,'test','data');
time_stamp = datestr(datetime('now','TimeZone','Z'),'yyyymmddThhMMSSZ');


% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% Global simulation parameters
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------

% ------------------------------------------------------------------------- 
% Define global variables
% ------------------------------------------------------------------------- 
global reference_frequency 
global frequency_array 
global time_array
global dt
global df 
global CONSTANT
% global space_grid

% -------------------------------------------------------------------------
% Set global simulation parameters
% -------------------------------------------------------------------------
reference_frequency = 193.1e12;
nsamples_per_symbol = 128;
nsymbols = 32;
symbol_rate = 25e9;

nsamples = nsamples_per_symbol*nsymbols;
sample_rate = nsamples_per_symbol*symbol_rate;
[time_array,dt,frequency_array,df] = core_create_time_axis(nsamples_per_symbol,nsymbols,symbol_rate);        
        
  
% reference_frequency = 193.1e12;
% df = 10e6;
% nsamples = 2^14;
% 
% sample_rate = nsamples*df;
% dt = 1/sample_rate;
% time_array = (0:nsamples-1)*dt;
% frequency_array = (-nsamples/2:nsamples/2-1)*df;

% -------------------------------------------------------------------------
% Space grid
% -------------------------------------------------------------------------
% xrange = [-15e-6, 15e-6];  
% yrange = [-15e-6, 15e-6]; 
% nxpoints = 2001;
% nypoints = 2001;
% space_grid = create_space_grid(xrange,yrange,nxpoints,nypoints);
% [space_grid.THETA,space_grid.RHO] = cart2pol(space_grid.X,space_grid.Y); 

% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------

% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% Startup routines
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------

% ------------------------------------------------------------------------- 
% Load physical constants
% ------------------------------------------------------------------------- 
CONSTANT = core_load_constants();
% Load essential physical constants.

% ------------------------------------------------------------------------- 
% Start time 
% ------------------------------------------------------------------------- 
start_time = clock;
fprintf('\n\n%s%s\n\n','Simulation started on ',datestr(start_time));


%--------------------------------------------------------------------------
% Switches
%--------------------------------------------------------------------------
do_debug = 1;
do_print = 0;
do_add_figsize_to_filename = 1;
margin_figure = 0;
fig.interpreter = 'latex';



% ------------------------------------------------------------------------- 
% ------------------------------------------------------------------------- 
% ------------------------------------------------------------------------- 
% ------------------------------------------------------------------------- 
% Now we are ready to implement the system
% -------------------------------------------------------------------------        
% ------------------------------------------------------------------------- 
% ------------------------------------------------------------------------- 
% ------------------------------------------------------------------------- 



% -------------------------------------------------------------------------
% Linear polarisation // -x
% -------------------------------------------------------------------------
sig.x = sqrt(1.0e-3)*ones(1,nsamples);
sig.y = zeros(1,nsamples);

S = char_opt_stokes(sig);

fprintf('\n\n%s\n','Linear polarisation at 0 degrees')
fprintf('%s\n','================================')

actS = S(:,1)/S(1,1)
expS = [1 1 0 0].'


%%
% -------------------------------------------------------------------------
% Linear polarisation // -y
% -------------------------------------------------------------------------
sig.x = zeros(1,nsamples);
sig.y = sqrt(1.0e-3)*ones(1,nsamples);

S = char_opt_stokes(sig);

fprintf('\n\n%s\n','Linear polarisation at 90 degrees')
fprintf('%s\n','=================================')

actS = S(:,1)/S(1,1)
expS = [1 -1 0 0].'


%%
% -------------------------------------------------------------------------
% Linear polarisation at +45 degrees
% -------------------------------------------------------------------------
sig.x = sqrt(1.0e-3/2)*ones(1,nsamples);
sig.y = sqrt(1.0e-3/2)*ones(1,nsamples);

S = char_opt_stokes(sig);

fprintf('\n\n%s\n','Linear polarisation at 45 degrees')
fprintf('%s\n','=================================')

actS = S(:,1)/S(1,1)
expS = [1 0 1 0].'


%%
% -------------------------------------------------------------------------
% Linear polarisation at -45 degrees
% -------------------------------------------------------------------------
sig.x = sqrt(1.0e-3/2)*ones(1,nsamples);
sig.y = -sqrt(1.0e-3/2)*ones(1,nsamples);

S = char_opt_stokes(sig);

fprintf('\n\n%s\n','Linear polarisation at -45 degrees')
fprintf('%s\n','==================================')

actS = S(:,1)/S(1,1)
expS = [1 0 -1 0].'        




%%
% -------------------------------------------------------------------------
% Right circular polarization
% -------------------------------------------------------------------------
sig.x = sqrt(1.0e-3/2)*ones(1,nsamples);
sig.y = sqrt(1.0e-3/2)*ones(1,nsamples)*exp(j*pi/2);

S = char_opt_stokes(sig);

fprintf('\n\n%s\n','Right circular polarization')
fprintf('%s\n',    '===========================')

actS = S(:,1)/S(1,1)
expS = [1 0 0 1].'     


%%
% -------------------------------------------------------------------------
% Left circular polarization
% -------------------------------------------------------------------------
sig.x = sqrt(1.0e-3/2)*ones(1,nsamples);
sig.y = sqrt(1.0e-3/2)*ones(1,nsamples)*exp(-j*pi/2);

S = char_opt_stokes(sig);

fprintf('\n\n%s\n','Left circular polarization')
fprintf('%s\n',    '==========================')

actS = S(:,1)/S(1,1)
expS = [1 0 0 -1].' 



hfig =plot_poincare_sphere('test')




% -------------------------------------------------------------------------
% Figure alignment
% -------------------------------------------------------------------------
% Requires alignfigs function
% Available at https://github.com/nickhale/alignfigs
% alignfigs(2)

%%
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% Save data
% -------------------------------------------------------------------------
% ------------------------------------------------------------------------- 
% file_name_data = [file_name_core_data '_' time_stamp]
% save(file_name_data,'');





        
        

% ------------------------------------------------------------------------- 
% ------------------------------------------------------------------------- 
% ------------------------------------------------------------------------- 
% ------------------------------------------------------------------------- 
% Display duration (or wrapup: core_wrapup(start_time,0);)
% ------------------------------------------------------------------------- 
core_display_duration(start_time,clock);
% ------------------------------------------------------------------------- 
% End of core file
% ------------------------------------------------------------------------- 
% ------------------------------------------------------------------------- 
% ------------------------------------------------------------------------- 
% ------------------------------------------------------------------------- 

% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% Guang Tong Xin Xi Tong Fang Zhen
% C. Peucheret (christophe.peucheret@univ-rennes.fr) 2009-20xx
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------